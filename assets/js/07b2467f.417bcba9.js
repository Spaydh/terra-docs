"use strict";(self.webpackChunkterra_docs=self.webpackChunkterra_docs||[]).push([[54],{3905:function(t,e,a){a.d(e,{Zo:function(){return m},kt:function(){return s}});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function d(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},i=Object.keys(t);for(r=0;r<i.length;r++)a=i[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)a=i[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var l=r.createContext({}),p=function(t){var e=r.useContext(l),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},m=function(t){var e=p(t.components);return r.createElement(l.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},k=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,i=t.originalType,l=t.parentName,m=d(t,["components","mdxType","originalType","parentName"]),k=p(a),s=n,f=k["".concat(l,".").concat(s)]||k[s]||c[s]||i;return a?r.createElement(f,o(o({ref:e},m),{},{components:a})):r.createElement(f,o({ref:e},m))}));function s(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var i=a.length,o=new Array(i);o[0]=k;var d={};for(var l in e)hasOwnProperty.call(e,l)&&(d[l]=e[l]);d.originalType=t,d.mdxType="string"==typeof t?t:n,o[1]=d;for(var p=2;p<i;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},1617:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return d},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return m},default:function(){return k}});var r=a(7462),n=a(3366),i=(a(7294),a(3905)),o=["components"],d={},l="Airdrop Registry",p={unversionedId:"contracts/airdrop-registry",id:"contracts/airdrop-registry",isDocsHomePage:!1,title:"Airdrop Registry",description:"The Airdrop Registry contract manages the fabrication of messages relevant to claiming and swapping tokens airdropped to Luna delegators. Airdropped tokens to the bLuna Hub contract are swapped for Terra USD and distributed as bLuna rewards.",source:"@site/docs/contracts/airdrop-registry.md",sourceDirName:"contracts",slug:"/contracts/airdrop-registry",permalink:"/terra-docs/contracts/airdrop-registry",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/contracts/airdrop-registry.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Validators Registry",permalink:"/terra-docs/contracts/validators_registry"},next:{title:"Tokens: stLuna and bLuna",permalink:"/terra-docs/contracts/stLuna_and_bLuna"}},m=[{value:"Config",id:"config",children:[]},{value:"InitMsg",id:"initmsg",children:[]},{value:"ExecuteMsg",id:"executemsg",children:[{value:"<code>UpdateConfig</code>",id:"updateconfig",children:[]},{value:"<code>AddAirdropInfo</code>",id:"addairdropinfo",children:[]},{value:"<code>UpdateAirdropInfo</code>",id:"updateairdropinfo",children:[]},{value:"<code>RemoveAirdropInfo</code>",id:"removeairdropinfo",children:[]},{value:"<code>FabricateMIRClaim</code>",id:"fabricatemirclaim",children:[]},{value:"<code>FabricateANCClaim</code>",id:"fabricateancclaim",children:[]}]},{value:"QueryMsg",id:"querymsg",children:[{value:"<code>Config</code>",id:"config-1",children:[]},{value:"<code>ConfigResponse</code>",id:"configresponse",children:[]},{value:"<code>AirdropInfo</code>",id:"airdropinfo",children:[]},{value:"<code>AirdropInfoResponse</code>",id:"airdropinforesponse",children:[]}]}],c={toc:m};function k(t){var e=t.components,a=(0,n.Z)(t,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"airdrop-registry"},"Airdrop Registry"),(0,i.kt)("p",null,"The Airdrop Registry contract manages the fabrication of messages relevant to claiming and swapping tokens airdropped to Luna delegators. Airdropped tokens to the ",(0,i.kt)("a",{parentName:"p",href:"hub"},"bLuna Hub")," contract are swapped for Terra USD and distributed as bLuna rewards."),(0,i.kt)("p",null,"The Airdrop Registry is initially configured to support airdrops of ",(0,i.kt)("a",{parentName:"p",href:"https://docs.anchorprotocol.com/protocol/anchor-token-anc"},"ANC")," and ",(0,i.kt)("a",{parentName:"p",href:"https://mirror.finance"},"Mirror Protocol"),"'s governance token, ",(0,i.kt)("a",{parentName:"p",href:"https://docs.mirror.finance/protocol/mirror-token-mir"},"MIR"),". When a new airdrop is distributed to Luna stakers, a new Airdrop Registry contract that includes the message interface for claiming and swapping the airdrop token can be deployed and its address newly registered to the bLuna Hub contract."),(0,i.kt)("h2",{id:"config"},"Config"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"owner")),(0,i.kt)("td",{parentName:"tr",align:"left"},"CanonicalAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Address of contract owner")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"hub_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Contract address of ",(0,i.kt)("a",{parentName:"td",href:"hub"},"bLuna Hub"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"reward_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Contract address of ",(0,i.kt)("a",{parentName:"td",href:"reward"},"bLuna Reward"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_tokens")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Vec","<","String",">"),(0,i.kt)("td",{parentName:"tr",align:"left"},"List of supported airdrop token tickers")))),(0,i.kt)("h2",{id:"initmsg"},"InitMsg"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\npub struct InitMsg {\n    pub hub_contract: HumanAddr,\n    pub reward_contract: HumanAddr,\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "hub_contract": "terra1...", \n  "reward_contract": "terra1..." \n}\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"hub_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Contract address of ",(0,i.kt)("a",{parentName:"td",href:"hub"},"bLuna Hub"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"reward_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Contract address of ",(0,i.kt)("a",{parentName:"td",href:"reward"},"bLuna Reward"))))),(0,i.kt)("h2",{id:"executemsg"},"ExecuteMsg"),(0,i.kt)("h3",{id:"updateconfig"},(0,i.kt)("inlineCode",{parentName:"h3"},"UpdateConfig")),(0,i.kt)("p",null,"Updates the Airdrop Registry contract configuration. Can only be issued by the contract owner."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\n#[serde(rename_all = "snake_case")]\npub enum ExecuteMsg {\n    UpdateConfig {\n        owner: Option<HumanAddr>, \n        hub_contract: Option<HumanAddr>, \n        reward_contract: Option<HumanAddr>, \n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "update_config": {\n    "owner": "terra1...", \n    "hub_contract": "terra1...", \n    "reward_contract": "terra1..." \n  }\n}\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"owner"),"*"),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Address of new owner")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"hub_contract"),"*"),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"New contract address of ",(0,i.kt)("a",{parentName:"td",href:"hub"},"bLuna Hub"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"reward_contract"),"*"),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"New contract address of ",(0,i.kt)("a",{parentName:"td",href:"reward"},"bLuna Reward"))))),(0,i.kt)("p",null,"*"," = optional"),(0,i.kt)("h3",{id:"addairdropinfo"},(0,i.kt)("inlineCode",{parentName:"h3"},"AddAirdropInfo")),(0,i.kt)("p",null,"Adds support for a new airdrop to Luna stakers. Can only be issued by the contract owner."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\n#[serde(rename_all = "snake_case")]\npub enum ExecuteMsg {\n    AddAirdropInfo {\n        airdrop_token: String, \n        airdrop_info: AirdropInfo, \n    }\n}\n\n#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\npub struct AirdropInfo {\n    pub airdrop_token_contract: HumanAddr, \n    pub airdrop_contract: HumanAddr, \n    pub airdrop_swap_contract: HumanAddr, \n    pub swap_belief_price: Option<Decimal>, \n    pub swap_max_spread: Option<Decimal>, \n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "add_airdrop_info": {\n    "airdrop_token": "MIR", \n    "airdrop_info": {\n      "airdrop_token_contract": "terra1...", \n      "airdrop_contract": "terra1...", \n      "airdrop_swap_contract": "terra1...", \n      "swap_belief_price": null, \n      "swap_max_spread": null \n    }\n  }\n}\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_token")),(0,i.kt)("td",{parentName:"tr",align:"left"},"String"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Ticker of airdrop token")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_info")),(0,i.kt)("td",{parentName:"tr",align:"left"},"AirdropInfo"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Airdrop token information")))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_token_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Contract address of airdrop token's Cw20 token contract")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Contract address of airdrop contract to claim airdrop token")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_swap_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Contract address of swap contract to convert airdrop token to TerraUSD ","(","e.g. Terraswap Pair",")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"swap_belief_price"),"*"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Decimal"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Expected conversion rate when swapping airdropped token to TerraUSD.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"swap_max_spread"),"*"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Decimal"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Maximum allowed spread when swapping airdropped token to TerraUSD.")))),(0,i.kt)("p",null,"*"," = optional"),(0,i.kt)("h3",{id:"updateairdropinfo"},(0,i.kt)("inlineCode",{parentName:"h3"},"UpdateAirdropInfo")),(0,i.kt)("p",null,"Updates information for an already supported airdrop token. Can only be issued by the contract owner."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\n#[serde(rename_all = "snake_case")]\npub enum ExecuteMsg {\n    UpdateAirdropInfo {\n        airdrop_token: String, \n        airdrop_info: AirdropInfo, \n    }\n}\n\n#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\npub struct AirdropInfo {\n    pub airdrop_token_contract: HumanAddr, \n    pub airdrop_contract: HumanAddr, \n    pub airdrop_swap_contract: HumanAddr, \n    pub swap_belief_price: Option<Decimal>, \n    pub swap_max_spread: Option<Decimal>, \n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "update_airdrop_info": {\n    "airdrop_token": "MIR", \n    "airdrop_info": {\n      "airdrop_token_contract": "terra1...", \n      "airdrop_contract": "terra1...", \n      "airdrop_swap_contract": "terra1...", \n      "swap_belief_price": null, \n      "swap_max_spread": null \n    }\n  }\n}\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_token")),(0,i.kt)("td",{parentName:"tr",align:"left"},"String"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Ticker of airdrop token")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_info")),(0,i.kt)("td",{parentName:"tr",align:"left"},"AirdropInfo"),(0,i.kt)("td",{parentName:"tr",align:"left"},"New airdrop token information")))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_token_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"New contract address of airdrop token's Cw20 token contract")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"New contract address of airdrop contract to claim airdrop token")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_swap_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"New contract address of swap contract to convert airdrop token to TerraUSD")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"swap_belief_price"),"*"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Decimal"),(0,i.kt)("td",{parentName:"tr",align:"left"},"New expected conversion rate when swapping airdropped token to TerraUSD")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"swap_max_spread"),"*"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Decimal"),(0,i.kt)("td",{parentName:"tr",align:"left"},"New maximum allowed spread when swapping airdropped token to TerraUSD")))),(0,i.kt)("p",null,"*"," = optional"),(0,i.kt)("h3",{id:"removeairdropinfo"},(0,i.kt)("inlineCode",{parentName:"h3"},"RemoveAirdropInfo")),(0,i.kt)("p",null,"Removes support for a currently supported airdrop. Can only be issued by the contract owner."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\n#[serde(rename_all = "snake_case")]\npub enum ExecuteMsg {\n    RemoveAirdropInfo {\n        airdrop_token: String, \n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "remove_airdrop_info": {\n    "airdrop_token": "MIR" \n  }\n}\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_token")),(0,i.kt)("td",{parentName:"tr",align:"left"},"String"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Ticker of airdrop token")))),(0,i.kt)("h3",{id:"fabricatemirclaim"},(0,i.kt)("inlineCode",{parentName:"h3"},"FabricateMIRClaim")),(0,i.kt)("p",null,"Fabricates a message to claim MIR airdrop. Can only be issued by the ",(0,i.kt)("a",{parentName:"p",href:"hub"},"Hub"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\n#[serde(rename_all = "snake_case")]\npub enum ExecuteMsg {\n    FabricateMIRClaim {\n        stage: u8, \n        amount: Uint128, \n        proof: Vec<String>, \n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "fabricate_mir_claim": {\n    "stage": 5, \n    "amount": "100000000", \n    "proof": [\n      "7132d2bab1c85ecda6aa6b417e7b2d085675c1139c5cf5b5556d1c10502ddd53", \n      "21ca861414821082c98620ba1eef9c91f41309a79c043d5615d51d26cc796b61", \n      "03cd093fcf64825e33a18eaf86bc828049b1ee1a7348ce60d90ee07b3858bb83", \n      "b55feb67c2a3540502ea11349ff75bc83ebab03626a2c7b1d4333a7776fd2178", \n      "6f96345d8d8e8eeea738f51c5f31ce01122ce9e93f7f1a978860263ffc29462e", \n      "878ec313d28ef91384b426f0c81c2bce00c817added7bdb1e075250df46b0a0d" \n    ]\n  }\n}\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"stage")),(0,i.kt)("td",{parentName:"tr",align:"left"},"u8"),(0,i.kt)("td",{parentName:"tr",align:"left"},"MIR airdrop stage")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"amount")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Uint128"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Amount of MIR airdrop claimable by bLuna at this stage")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"proof")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Vec","<","String",">"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Merkle proof to prove airdrop eligibility")))),(0,i.kt)("h3",{id:"fabricateancclaim"},(0,i.kt)("inlineCode",{parentName:"h3"},"FabricateANCClaim")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\n#[serde(rename_all = "snake_case")]\npub enum ExecuteMsg {\n    FabricateANCClaim {\n        stage: u8, \n        amount: Uint128, \n        proof: Vec<String>, \n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "fabricate_anc_claim": {\n    "stage": 5, \n    "amount": "100000000", \n    "proof": [\n      "7132d2bab1c85ecda6aa6b417e7b2d085675c1139c5cf5b5556d1c10502ddd53", \n      "21ca861414821082c98620ba1eef9c91f41309a79c043d5615d51d26cc796b61", \n      "03cd093fcf64825e33a18eaf86bc828049b1ee1a7348ce60d90ee07b3858bb83", \n      "b55feb67c2a3540502ea11349ff75bc83ebab03626a2c7b1d4333a7776fd2178", \n      "6f96345d8d8e8eeea738f51c5f31ce01122ce9e93f7f1a978860263ffc29462e", \n      "878ec313d28ef91384b426f0c81c2bce00c817added7bdb1e075250df46b0a0d" \n    ]\n  }\n}\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"stage")),(0,i.kt)("td",{parentName:"tr",align:"left"},"u8"),(0,i.kt)("td",{parentName:"tr",align:"left"},"MIR airdrop stage")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"amount")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Uint128"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Amount of MIR airdrop claimable by bLuna at this stage")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"proof")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Vec","<","String",">"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Merkle proof to prove airdrop eligibility")))),(0,i.kt)("h2",{id:"querymsg"},"QueryMsg"),(0,i.kt)("h3",{id:"config-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"Config")),(0,i.kt)("p",null,"Gets the Airdrop Registry contract configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\n#[serde(rename_all = "snake_case")]\npub enum QueryMsg {\n    Config {}\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "config": {}\n}\n')),(0,i.kt)("h3",{id:"configresponse"},(0,i.kt)("inlineCode",{parentName:"h3"},"ConfigResponse")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\npub struct ConfigResponse {\n    pub owner: HumanAddr, \n    pub hub_contract: HumanAddr, \n    pub reward_contract: HumanAddr, \n    pub airdrop_tokens: Vec<String>, \n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "owner": "terra1...", \n  "hub_contract": "terra1...", \n  "reward_contract": "terra1...", \n  "airdrop_tokens": [\n    "MIR"\n  ]\n}\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"owner")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Address of contract owner")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"hub_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Contract address of ",(0,i.kt)("a",{parentName:"td",href:"hub"},"bLuna Hub"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"reward_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Contract address of ",(0,i.kt)("a",{parentName:"td",href:"reward"},"bLuna Reward"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_tokens")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Vec","<","String",">"),(0,i.kt)("td",{parentName:"tr",align:"left"},"List of supported airdrop token tickers")))),(0,i.kt)("h3",{id:"airdropinfo"},(0,i.kt)("inlineCode",{parentName:"h3"},"AirdropInfo")),(0,i.kt)("p",null,"Gets information for the specified airdrop token if the ",(0,i.kt)("inlineCode",{parentName:"p"},"airdrop_token")," field is filled. Gets information for all airdrop tokens if the ",(0,i.kt)("inlineCode",{parentName:"p"},"airdrop_token")," field is not filled."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\n#[serde(rename_all = "snake_case")]\npub enum QueryMsg {\n    AirdropInfo {\n        airdrop_token: Option<String>, \n        start_after: Option<String>, \n        limit: Option<u32>, \n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "airdrop_info": {\n    "airdrop_token": "MIR", \n    "start_after": null, \n    "limit": null \n  }\n}\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_token"),"*"),(0,i.kt)("td",{parentName:"tr",align:"left"},"String"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Ticker of airdrop token to query information")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"start_after"),"*"),(0,i.kt)("td",{parentName:"tr",align:"left"},"String"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Airdrop token ticker to start query")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"limit"),"*"),(0,i.kt)("td",{parentName:"tr",align:"left"},"u32"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Maximum number of query entries")))),(0,i.kt)("p",null,"*"," = optional"),(0,i.kt)("h3",{id:"airdropinforesponse"},(0,i.kt)("inlineCode",{parentName:"h3"},"AirdropInfoResponse")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\npub struct AirdropInfoResponse {\n    pub airdrop_info: Vec<AirdropInfoElem>, \n}\n\n#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\npub struct AirdropInfoElem {\n    pub airdrop_token: String, \n    pub info: AirdropInfo, \n}\n\n#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\npub struct AirdropInfo {\n    pub airdrop_token_contract: HumanAddr, \n    pub airdrop_contract: HumanAddr, \n    pub airdrop_swap_contract: HumanAddr, \n    pub swap_belief_price: Option<Decimal>, \n    pub swap_max_spread: Option<Decimal>, \n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "airdrop_info": [\n    {\n      "airdrop_token": "MIR", \n      "info": {\n        "airdrop_token_contract": "terra1...", \n        "airdrop_contract": "terra1...", \n        "airdrop_swap_contract": "terra1...", \n        "swap_belief_price": null, \n        "swap_max_spread": null \n      }\n    }\n  ]\n}\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_info")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Vec","<","AirdropInfoElem",">"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Information of the specified airdrop token")))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_token")),(0,i.kt)("td",{parentName:"tr",align:"left"},"String"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Airdrop token's ticker")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"info")),(0,i.kt)("td",{parentName:"tr",align:"left"},"AirdropInfo"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Airdrop token information")))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_token_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Contract address of airdrop token's Cw20 token contract")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Contract address of airdrop contract to claim airdrop token")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"airdrop_swap_contract")),(0,i.kt)("td",{parentName:"tr",align:"left"},"HumanAddr"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Contract address of swap contract to convert airdrop token to TerraUSD")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"swap_belief_price"),"*"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Decimal"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Expected conversion rate when swapping airdropped token to TerraUSD")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"swap_max_spread"),"*"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Decimal"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Maximum allowed spread when swapping airdropped token to TerraUSD")))),(0,i.kt)("p",null,"*"," = optional"))}k.isMDXComponent=!0}}]);