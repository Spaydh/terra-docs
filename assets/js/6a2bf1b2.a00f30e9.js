"use strict";(self.webpackChunkterra_docs=self.webpackChunkterra_docs||[]).push([[605],{3905:function(t,e,a){a.d(e,{Zo:function(){return m},kt:function(){return c}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function d(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?d(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):d(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},d=Object.keys(t);for(n=0;n<d.length;n++)a=d[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(t);for(n=0;n<d.length;n++)a=d[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var i=n.createContext({}),p=function(t){var e=n.useContext(i),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},m=function(t){var e=p(t.components);return n.createElement(i.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,d=t.originalType,i=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),u=p(a),c=r,k=u["".concat(i,".").concat(c)]||u[c]||s[c]||d;return a?n.createElement(k,l(l({ref:e},m),{},{components:a})):n.createElement(k,l({ref:e},m))}));function c(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var d=a.length,l=new Array(d);l[0]=u;var o={};for(var i in e)hasOwnProperty.call(e,i)&&(o[i]=e[i]);o.originalType=t,o.mdxType="string"==typeof t?t:r,l[1]=o;for(var p=2;p<d;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3697:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return o},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return m},default:function(){return u}});var n=a(7462),r=a(3366),d=(a(7294),a(3905)),l=["components"],o={},i="Rewards Dispatcher",p={unversionedId:"contracts/rewards_dispatcher",id:"contracts/rewards_dispatcher",isDocsHomePage:!1,title:"Rewards Dispatcher",description:"The Rewards Dispatcher contract accumulates the rewards from Hub's delegations and manages the rewards.",source:"@site/docs/contracts/rewards_dispatcher.md",sourceDirName:"contracts",slug:"/contracts/rewards_dispatcher",permalink:"/contracts/rewards_dispatcher",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/contracts/rewards_dispatcher.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Reward",permalink:"/contracts/reward"},next:{title:"Validators Registry",permalink:"/contracts/validators_registry"}},m=[{value:"Config",id:"config",children:[]},{value:"InitMsg",id:"initmsg",children:[]},{value:"ExecuteMsg",id:"executemsg",children:[{value:"<code>UpdateConfig</code>",id:"updateconfig",children:[]},{value:"<code>[Internal] SwapToRewardDenom</code>",id:"internal-swaptorewarddenom",children:[]},{value:"<code>[Internal] DispatchRewards</code>",id:"internal-dispatchrewards",children:[]}]},{value:"QueryMsg",id:"querymsg",children:[{value:"<code>Config</code>",id:"config-1",children:[]}]}],s={toc:m};function u(t){var e=t.components,a=(0,r.Z)(t,l);return(0,d.kt)("wrapper",(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,d.kt)("h1",{id:"rewards-dispatcher"},"Rewards Dispatcher"),(0,d.kt)("p",null,"The Rewards Dispatcher contract accumulates the rewards from Hub's delegations and manages the rewards."),(0,d.kt)("p",null,"All rewards from ",(0,d.kt)("em",{parentName:"p"},"stLuna")," tokens (the share of all rewards proportional to the amount of ",(0,d.kt)("em",{parentName:"p"},"stLuna")," tokens minted) are converted to Luna and are re-delegated back to the validators pool."),(0,d.kt)("p",null,"All rewards from ",(0,d.kt)("em",{parentName:"p"},"bLuna")," (the share of all rewards proportional to the amount of ",(0,d.kt)("em",{parentName:"p"},"bLuna")," tokens minted) are sent to the Reward Contract and handled the old way."),(0,d.kt)("h2",{id:"config"},"Config"),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,d.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"owner")),(0,d.kt)("td",{parentName:"tr",align:"left"},"CanonicalAddr"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Owner of the contract")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"hub_contract")),(0,d.kt)("td",{parentName:"tr",align:"left"},"CanonicalAddr"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Contract address of ",(0,d.kt)("a",{parentName:"td",href:"hub"},"Hub"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"bluna_reward_contract")),(0,d.kt)("td",{parentName:"tr",align:"left"},"CanonicalAddr"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Contract address of ",(0,d.kt)("a",{parentName:"td",href:"reward"},"bLuna Reward"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"stluna_reward_denom")),(0,d.kt)("td",{parentName:"tr",align:"left"},"String"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Native token denomination for distributed stLuna rewards")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"bluna_reward_denom")),(0,d.kt)("td",{parentName:"tr",align:"left"},"String"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Native token denomination for distributed bLuna rewards")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"lido_fee_address")),(0,d.kt)("td",{parentName:"tr",align:"left"},"CanonicalAddr"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Address for fee distribution")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"lido_fee_rate")),(0,d.kt)("td",{parentName:"tr",align:"left"},"Decimal"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Amount of fees which goes to Lido Fee Address")))),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "owner": "terra1...",\n  "hub_contract": "terra1...",\n  "bluna_reward_contract": "terra1...",\n  "stluna_reward_denom": "uluna",\n  "bluna_reward_denom": "uusd",\n  "lido_fee_address": "terra1...",\n  "lido_fee_rate": "0.005"\n}\n')),(0,d.kt)("h2",{id:"initmsg"},"InitMsg"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct InstantiateMsg {\n    pub hub_contract: String,\n    pub bluna_reward_contract: String,\n    pub stluna_reward_denom: String,\n    pub bluna_reward_denom: String,\n    pub lido_fee_address: String,\n    pub lido_fee_rate: Decimal,\n}\n")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "hub_contract": "terra1...",\n  "bluna_reward_contract": "terra1...",\n  "stluna_reward_denom": "uluna",\n  "bluna_reward_denom": "uusd",\n  "lido_fee_address": "terra1...",\n  "lido_fee_rate": "0.005" \n}\n')),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,d.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"hub_contract")),(0,d.kt)("td",{parentName:"tr",align:"left"},"CanonicalAddr"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Contract address of ",(0,d.kt)("a",{parentName:"td",href:"hub"},"Hub"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"bluna_reward_contract")),(0,d.kt)("td",{parentName:"tr",align:"left"},"CanonicalAddr"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Contract address of ",(0,d.kt)("a",{parentName:"td",href:"reward"},"bLuna Reward"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"stluna_reward_denom")),(0,d.kt)("td",{parentName:"tr",align:"left"},"String"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Native token denomination for distributed stLuna rewards")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"bluna_reward_denom")),(0,d.kt)("td",{parentName:"tr",align:"left"},"String"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Native token denomination for distributed bLuna rewards")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"lido_fee_address")),(0,d.kt)("td",{parentName:"tr",align:"left"},"CanonicalAddr"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Address for fee distribution")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"lido_fee_rate")),(0,d.kt)("td",{parentName:"tr",align:"left"},"Decimal"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Amount of fees which goes to Lido Fee Address")))),(0,d.kt)("h2",{id:"executemsg"},"ExecuteMsg"),(0,d.kt)("h3",{id:"updateconfig"},(0,d.kt)("inlineCode",{parentName:"h3"},"UpdateConfig")),(0,d.kt)("p",null,"Updates the dispatcher's configuration. Can only be executed by the owner."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum ExecuteMsg{\n    UpdateConfig {\n        owner: Option<String>,\n        hub_contract: Option<String>,\n        bluna_reward_contract: Option<String>,\n        stluna_reward_denom: Option<String>,\n        bluna_reward_denom: Option<String>,\n        lido_fee_address: Option<String>,\n        lido_fee_rate: Option<Decimal>,\n    },\n}\n")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "owner": "terra1...",\n  "hub_contract": "terra1...",\n  "bluna_reward_contract": "terra1...",\n  "stluna_reward_denom": "uluna",\n  "bluna_reward_denom": "uusd",\n  "lido_fee_address": "terra1...",\n  "lido_fee_rate": "0.005" \n}\n')),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,d.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"owner"),"*"),(0,d.kt)("td",{parentName:"tr",align:"left"},"CanonicalAddr"),(0,d.kt)("td",{parentName:"tr",align:"left"},"New owner of the contract")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"hub_contract"),"*"),(0,d.kt)("td",{parentName:"tr",align:"left"},"CanonicalAddr"),(0,d.kt)("td",{parentName:"tr",align:"left"},"New contract address of ",(0,d.kt)("a",{parentName:"td",href:"hub"},"Hub"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"bluna_reward_contract"),"*"),(0,d.kt)("td",{parentName:"tr",align:"left"},"CanonicalAddr"),(0,d.kt)("td",{parentName:"tr",align:"left"},"New contract address of ",(0,d.kt)("a",{parentName:"td",href:"reward"},"bLuna Reward"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"stluna_reward_denom"),"*"),(0,d.kt)("td",{parentName:"tr",align:"left"},"String"),(0,d.kt)("td",{parentName:"tr",align:"left"},"New native token denomination for distributed stLuna rewards")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"bluna_reward_denom"),"*"),(0,d.kt)("td",{parentName:"tr",align:"left"},"String"),(0,d.kt)("td",{parentName:"tr",align:"left"},"New native token denomination for distributed bLuna rewards")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"lido_fee_address"),"*"),(0,d.kt)("td",{parentName:"tr",align:"left"},"CanonicalAddr"),(0,d.kt)("td",{parentName:"tr",align:"left"},"New address for fee distribution")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"lido_fee_rate"),"*"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Decimal"),(0,d.kt)("td",{parentName:"tr",align:"left"},"New amount of fees which goes to Lido Fee Address")))),(0,d.kt)("p",null,"*"," = optional"),(0,d.kt)("h3",{id:"internal-swaptorewarddenom"},(0,d.kt)("inlineCode",{parentName:"h3"},"[Internal] SwapToRewardDenom")),(0,d.kt)("p",null,"Swaps all native tokens on his balance to Luna and Terra USD proportional to the minted stLuna and bLuna amount."),(0,d.kt)("p",null,"Can only be executed by the ",(0,d.kt)("a",{parentName:"p",href:"hub"},"Hub"),"."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum ExecuteMsg {\n    SwapToRewardDenom {\n        bluna_total_mint_amount: Uint128,\n        stluna_total_mint_amount: Uint128,\n    }\n}\n")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "bluna_total_mint_amount": "100000",\n  "stluna_total_mint_amount": "2000000"\n}\n')),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,d.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"bluna_total_mint_amount")),(0,d.kt)("td",{parentName:"tr",align:"left"},"Uint128"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Total amount of minted bLuna")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"stluna_total_mint_amount")),(0,d.kt)("td",{parentName:"tr",align:"left"},"Uint128"),(0,d.kt)("td",{parentName:"tr",align:"left"},"Total amount of minted stLuna")))),(0,d.kt)("h3",{id:"internal-dispatchrewards"},(0,d.kt)("inlineCode",{parentName:"h3"},"[Internal] DispatchRewards")),(0,d.kt)("p",null,"Re-stakes the stLuna rewards (with subtracted Lido Fee) and sends the bLuna rewards to the old bLuna Rewards contract (with subtracted Lido Fee)."),(0,d.kt)("p",null,"Can only be executed by the ",(0,d.kt)("a",{parentName:"p",href:"hub"},"Hub"),"."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum ExecuteMsg {\n    DispatchRewards {}\n}\n")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dispatch_rewards": {}\n}\n')),(0,d.kt)("h2",{id:"querymsg"},"QueryMsg"),(0,d.kt)("h3",{id:"config-1"},(0,d.kt)("inlineCode",{parentName:"h3"},"Config")),(0,d.kt)("p",null,"Returns the current configuration of the contract."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum QueryMsg {\n    Config {},\n}\n")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "config": {}\n}\n')),(0,d.kt)("p",null,"Returns ",(0,d.kt)("a",{parentName:"p",href:"rewards_dispatcher#config"},(0,d.kt)("inlineCode",{parentName:"a"},"Config"))," struct."))}u.isMDXComponent=!0}}]);